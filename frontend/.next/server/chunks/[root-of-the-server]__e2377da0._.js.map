{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///D:/my-fullstack-app/frontend/src/utils/apiRoutes.ts"],"sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\n\n// Get the base URL from environment variables or use default\nconst getBaseUrl = () =>\n  process.env.NEXT_PUBLIC_API_URL || \"http://localhost:3001\";\n\n// Create a configured axios instance for API routes\nexport const apiRouteClient = (cookie?: string) => {\n  const config: AxiosRequestConfig = {\n    baseURL: getBaseUrl(),\n    withCredentials: true,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // Add cookie header if provided\n  if (cookie) {\n    config.headers = {\n      ...config.headers,\n      Cookie: cookie,\n    };\n  }\n\n  return axios.create(config);\n};\n"],"names":[],"mappings":";;;AAAA;;AAEA,6DAA6D;AAC7D,MAAM,aAAa,IACjB,6DAAmC;AAG9B,MAAM,iBAAiB,CAAC;IAC7B,MAAM,SAA6B;QACjC,SAAS;QACT,iBAAiB;QACjB,SAAS;YACP,gBAAgB;QAClB;IACF;IAEA,gCAAgC;IAChC,IAAI,QAAQ;QACV,OAAO,OAAO,GAAG;YACf,GAAG,OAAO,OAAO;YACjB,QAAQ;QACV;IACF;IAEA,OAAO,uIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;AACtB","debugId":null}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["file:///D:/my-fullstack-app/frontend/src/app/api/auth/resend-verification/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { apiRouteClient } from \"@/utils/apiRoutes\";\nimport { ApiRouteError } from \"@/types/api.types\";\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const api = apiRouteClient();\n\n    const response = await api.post(\"/auth/resend-verification\", body);\n\n    return NextResponse.json(response.data);\n  } catch (error: unknown) {\n    const apiError = error as ApiRouteError;\n    console.error(\n      \"Error resending verification:\",\n      apiError.response?.data || apiError.message\n    );\n    return NextResponse.json(\n      {\n        message:\n          apiError.response?.data?.message ||\n          \"Failed to resend verification email\",\n      },\n      { status: apiError.response?.status || 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,MAAM,CAAA,GAAA,2HAAA,CAAA,iBAAc,AAAD;QAEzB,MAAM,WAAW,MAAM,IAAI,IAAI,CAAC,6BAA6B;QAE7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS,IAAI;IACxC,EAAE,OAAO,OAAgB;QACvB,MAAM,WAAW;QACjB,QAAQ,KAAK,CACX,iCACA,SAAS,QAAQ,EAAE,QAAQ,SAAS,OAAO;QAE7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SACE,SAAS,QAAQ,EAAE,MAAM,WACzB;QACJ,GACA;YAAE,QAAQ,SAAS,QAAQ,EAAE,UAAU;QAAI;IAE/C;AACF","debugId":null}}]
}