{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///D:/my-fullstack-app/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from \"axios\";\n\n// Base API URL with fixed port 3000 for backend\nconst API_URL = \"http://localhost:3000\";\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Request interceptor for adding auth token\napi.interceptors.request.use(\n  (\n    config: import(\"axios\").InternalAxiosRequestConfig\n  ): import(\"axios\").InternalAxiosRequestConfig => {\n    // Get token from localStorage (only on client side)\n    if (typeof window !== \"undefined\") {\n      const token = localStorage.getItem(\"token\");\n      if (token && config.headers) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n    }\n    return config;\n  },\n  (error: AxiosError) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for handling common errors\napi.interceptors.response.use(\n  (response: AxiosResponse) => response,\n  (error: AxiosError) => {\n    // Handle unauthorized errors (401)\n    if (error.response?.status === 401) {\n      // Only on client side\n      if (typeof window !== \"undefined\") {\n        // Clear localStorage\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"user\");\n\n        // Redirect to login page if not already there\n        if (window.location.pathname !== \"/login\") {\n          window.location.href = \"/login\";\n        }\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n"],"names":[],"mappings":";;;AAAA;;AAEA,gDAAgD;AAChD,MAAM,UAAU;AAEhB,4CAA4C;AAC5C,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACvB,SAAS;IACT,SAAS;QACP,gBAAgB;IAClB;AACF;AAEA,4CAA4C;AAC5C,IAAI,YAAY,CAAC,OAAO,CAAC,GAAG,CAC1B,CACE;IAEA,oDAAoD;IACpD,uCAAmC;;IAKnC;IACA,OAAO;AACT,GACA,CAAC;IACC,OAAO,QAAQ,MAAM,CAAC;AACxB;AAGF,kDAAkD;AAClD,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,CAC3B,CAAC,WAA4B,UAC7B,CAAC;IACC,mCAAmC;IACnC,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;QAClC,sBAAsB;QACtB,uCAAmC;;QASnC;IACF;IAEA,OAAO,QAAQ,MAAM,CAAC;AACxB;uCAGa","debugId":null}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file:///D:/my-fullstack-app/frontend/src/services/auth.service.ts"],"sourcesContent":["import api from './api';\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n}\n\nexport interface ForgotPasswordData {\n  email: string;\n}\n\nexport interface ResetPasswordData {\n  token: string;\n  password: string;\n}\n\nexport interface ResendVerificationData {\n  email: string;\n}\n\nexport interface UpdateProfileData {\n  firstName?: string;\n  lastName?: string;\n  profilePicture?: string;\n}\n\nexport interface AuthResponse {\n  access_token: string;\n}\n\nexport interface UserProfile {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  isActive: boolean;\n  profilePicture?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nclass AuthService {\n  /**\n   * Register a new user\n   */\n  async register(data: RegisterData): Promise<void> {\n    await api.post('/auth/register', data);\n  }\n\n  /**\n   * Login with email and password\n   */\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const response = await api.post<AuthResponse>('/auth/login', credentials);\n    return response.data;\n  }\n\n  /**\n   * Get current user profile\n   */\n  async getProfile(): Promise<UserProfile> {\n    const response = await api.get<UserProfile>('/auth/profile');\n    return response.data;\n  }\n  \n  /**\n   * Update user profile\n   */\n  async updateProfile(data: UpdateProfileData): Promise<UserProfile> {\n    const response = await api.patch<UserProfile>('/auth/profile', data);\n    return response.data;\n  }\n\n  /**\n   * Request password reset\n   */\n  async forgotPassword(data: ForgotPasswordData): Promise<void> {\n    await api.post('/auth/forgot-password', data);\n  }\n\n  /**\n   * Reset password with token\n   */\n  async resetPassword(data: ResetPasswordData): Promise<void> {\n    await api.post('/auth/reset-password', data);\n  }\n\n  /**\n   * Verify email with token\n   */\n  async verifyEmail(token: string): Promise<void> {\n    await api.get(`/auth/verify-email?token=${token}`);\n  }\n\n  /**\n   * Resend verification email\n   */\n  async resendVerification(data: ResendVerificationData): Promise<void> {\n    await api.post('/auth/resend-verification', data);\n  }\n\n  /**\n   * Handle Google login callback\n   */\n  processGoogleCallback(token: string): void {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('token', token);\n      window.location.href = '/dashboard';\n    }\n  }\n\n  /**\n   * Logout user\n   */\n  logout(): void {\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated(): boolean {\n    if (typeof window !== 'undefined') {\n      return !!localStorage.getItem('token');\n    }\n    return false;\n  }\n}\n\nexport const authService = new AuthService();\nexport default authService;"],"names":[],"mappings":";;;;AAAA;;AAgDA,MAAM;IACJ;;GAEC,GACD,MAAM,SAAS,IAAkB,EAAiB;QAChD,MAAM,sHAAA,CAAA,UAAG,CAAC,IAAI,CAAC,kBAAkB;IACnC;IAEA;;GAEC,GACD,MAAM,MAAM,WAA6B,EAAyB;QAChE,MAAM,WAAW,MAAM,sHAAA,CAAA,UAAG,CAAC,IAAI,CAAe,eAAe;QAC7D,OAAO,SAAS,IAAI;IACtB;IAEA;;GAEC,GACD,MAAM,aAAmC;QACvC,MAAM,WAAW,MAAM,sHAAA,CAAA,UAAG,CAAC,GAAG,CAAc;QAC5C,OAAO,SAAS,IAAI;IACtB;IAEA;;GAEC,GACD,MAAM,cAAc,IAAuB,EAAwB;QACjE,MAAM,WAAW,MAAM,sHAAA,CAAA,UAAG,CAAC,KAAK,CAAc,iBAAiB;QAC/D,OAAO,SAAS,IAAI;IACtB;IAEA;;GAEC,GACD,MAAM,eAAe,IAAwB,EAAiB;QAC5D,MAAM,sHAAA,CAAA,UAAG,CAAC,IAAI,CAAC,yBAAyB;IAC1C;IAEA;;GAEC,GACD,MAAM,cAAc,IAAuB,EAAiB;QAC1D,MAAM,sHAAA,CAAA,UAAG,CAAC,IAAI,CAAC,wBAAwB;IACzC;IAEA;;GAEC,GACD,MAAM,YAAY,KAAa,EAAiB;QAC9C,MAAM,sHAAA,CAAA,UAAG,CAAC,GAAG,CAAC,CAAC,yBAAyB,EAAE,OAAO;IACnD;IAEA;;GAEC,GACD,MAAM,mBAAmB,IAA4B,EAAiB;QACpE,MAAM,sHAAA,CAAA,UAAG,CAAC,IAAI,CAAC,6BAA6B;IAC9C;IAEA;;GAEC,GACD,sBAAsB,KAAa,EAAQ;QACzC,uCAAmC;;QAGnC;IACF;IAEA;;GAEC,GACD,SAAe;QACb,uCAAmC;;QAInC;IACF;IAEA;;GAEC,GACD,kBAA2B;QACzB,uCAAmC;;QAEnC;QACA,OAAO;IACT;AACF;AAEO,MAAM,cAAc,IAAI;uCAChB","debugId":null}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":["file:///D:/my-fullstack-app/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\";\n\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from \"react\";\nimport authService, {\n  LoginCredentials,\n  RegisterData,\n  UserProfile,\n} from \"../services/auth.service\";\n\ninterface AuthContextType {\n  user: UserProfile | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (credentials: LoginCredentials) => Promise<void>;\n  register: (data: RegisterData) => Promise<void>;\n  logout: () => void;\n  refreshProfile: () => Promise<void>;\n  error: string | null;\n  clearError: () => void;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<UserProfile | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Check if user is authenticated on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        if (authService.isAuthenticated()) {\n          const userProfile = await authService.getProfile();\n          setUser(userProfile);\n        }\n      } catch (err) {\n        console.error(\"Failed to fetch user profile:\", err);\n        authService.logout();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (credentials: LoginCredentials) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const { access_token } = await authService.login(credentials);\n\n      // Save token to localStorage\n      if (typeof window !== \"undefined\") {\n        localStorage.setItem(\"token\", access_token);\n      }\n\n      // Fetch user profile\n      const userProfile = await authService.getProfile();\n      setUser(userProfile);\n    } catch (err) {\n      const errorMessage = \"Failed to login. Please try again.\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (data: RegisterData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      await authService.register(data);\n    } catch (err) {\n      const errorMessage = \"Failed to register. Please try again.\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n  };\n\n  const refreshProfile = async () => {\n    if (!authService.isAuthenticated()) {\n      return;\n    }\n\n    try {\n      const userProfile = await authService.getProfile();\n      setUser(userProfile);\n    } catch (err) {\n      console.error(\"Failed to refresh user profile:\", err);\n    }\n  };\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  const value = {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    refreshProfile,\n    error,\n    clearError,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\nexport default AuthContext;\n"],"names":[],"mappings":";;;;;;AAEA;AAOA;AATA;;;;AA+BA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,eAA4C,CAAC,EAAE,QAAQ,EAAE;IACpE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAsB;IACrD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IACpD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,0CAA0C;IAC1C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,YAAY;YAChB,IAAI;gBACF,IAAI,kIAAA,CAAA,UAAW,CAAC,eAAe,IAAI;oBACjC,MAAM,cAAc,MAAM,kIAAA,CAAA,UAAW,CAAC,UAAU;oBAChD,QAAQ;gBACV;YACF,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,iCAAiC;gBAC/C,kIAAA,CAAA,UAAW,CAAC,MAAM;YACpB,SAAU;gBACR,aAAa;YACf;QACF;QAEA;IACF,GAAG,EAAE;IAEL,MAAM,QAAQ,OAAO;QACnB,aAAa;QACb,SAAS;QAET,IAAI;YACF,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,kIAAA,CAAA,UAAW,CAAC,KAAK,CAAC;YAEjD,6BAA6B;YAC7B,uCAAmC;;YAEnC;YAEA,qBAAqB;YACrB,MAAM,cAAc,MAAM,kIAAA,CAAA,UAAW,CAAC,UAAU;YAChD,QAAQ;QACV,EAAE,OAAO,KAAK;YACZ,MAAM,eAAe;YACrB,SAAS;YACT,MAAM,IAAI,MAAM;QAClB,SAAU;YACR,aAAa;QACf;IACF;IAEA,MAAM,WAAW,OAAO;QACtB,aAAa;QACb,SAAS;QAET,IAAI;YACF,MAAM,kIAAA,CAAA,UAAW,CAAC,QAAQ,CAAC;QAC7B,EAAE,OAAO,KAAK;YACZ,MAAM,eAAe;YACrB,SAAS;YACT,MAAM,IAAI,MAAM;QAClB,SAAU;YACR,aAAa;QACf;IACF;IAEA,MAAM,SAAS;QACb,kIAAA,CAAA,UAAW,CAAC,MAAM;QAClB,QAAQ;IACV;IAEA,MAAM,iBAAiB;QACrB,IAAI,CAAC,kIAAA,CAAA,UAAW,CAAC,eAAe,IAAI;YAClC;QACF;QAEA,IAAI;YACF,MAAM,cAAc,MAAM,kIAAA,CAAA,UAAW,CAAC,UAAU;YAChD,QAAQ;QACV,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,mCAAmC;QACnD;IACF;IAEA,MAAM,aAAa;QACjB,SAAS;IACX;IAEA,MAAM,QAAQ;QACZ;QACA;QACA,iBAAiB,CAAC,CAAC;QACnB;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBAAO,8OAAC,YAAY,QAAQ;QAAC,OAAO;kBAAQ;;;;;;AAC9C;AAEO,MAAM,UAAU;IACrB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;uCAEe","debugId":null}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":["file:///D:/my-fullstack-app/frontend/src/services/game.service.ts"],"sourcesContent":["import api from './api';\n\n// Game types\nexport interface GameStats {\n  [key: string]: string | number;\n}\n\nexport interface InventoryItem {\n  name: string;\n  description?: string;\n  quantity: number;\n}\n\nexport interface Skill {\n  name: string;\n  description?: string;\n  level?: number;\n  mastery?: string;\n}\n\nexport interface LoreFragment {\n  type: 'npc' | 'item' | 'location' | 'general';\n  name?: string;\n  title?: string;\n  description?: string;\n  content?: string;\n}\n\nexport interface Choice {\n  text: string;\n  number: number;\n}\n\nexport interface StorySegment {\n  text: string;\n  timestamp: string;\n}\n\nexport interface Game {\n  id: string;\n  userId: string;\n  settings: GameSettings;\n  storyHistory: StorySegment[];\n  characterStats: GameStats;\n  inventoryItems: InventoryItem[];\n  characterSkills: Skill[];\n  loreFragments: LoreFragment[];\n  currentPrompt: string;\n  currentChoices: Choice[];\n  active: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface AdditionalSettings {\n  style?: string;\n  difficulty?: string;\n  gameLength?: string;\n  combatStyle?: string;\n  [key: string]: string | number | boolean | object | undefined;\n}\n\nexport interface GameSettings {\n  theme: string;\n  setting: string;\n  characterName: string;\n  characterBackstory: string;\n  additionalSettings?: AdditionalSettings;\n}\n\nexport interface CreateGameDto {\n  gameSettings: GameSettings;\n}\n\nclass GameService {\n  /**\n   * Create a new game\n   */\n  async createGame(createGameData: CreateGameDto): Promise<Game> {\n    const response = await api.post<Game>('/games', createGameData);\n    return response.data;\n  }\n\n  /**\n   * Process player choice and continue game\n   * Note: This endpoint wasn't visible in the controller we examined,\n   * but would be necessary for gameplay.\n   */\n  async makeChoice(gameId: string, choiceNumber: number): Promise<Game> {\n    const response = await api.post<Game>(`/games/${gameId}/choice`, { choiceNumber });\n    return response.data;\n  }\n}\n\nexport const gameService = new GameService();\nexport default gameService;"],"names":[],"mappings":";;;;AAAA;;AA0EA,MAAM;IACJ;;GAEC,GACD,MAAM,WAAW,cAA6B,EAAiB;QAC7D,MAAM,WAAW,MAAM,sHAAA,CAAA,UAAG,CAAC,IAAI,CAAO,UAAU;QAChD,OAAO,SAAS,IAAI;IACtB;IAEA;;;;GAIC,GACD,MAAM,WAAW,MAAc,EAAE,YAAoB,EAAiB;QACpE,MAAM,WAAW,MAAM,sHAAA,CAAA,UAAG,CAAC,IAAI,CAAO,CAAC,OAAO,EAAE,OAAO,OAAO,CAAC,EAAE;YAAE;QAAa;QAChF,OAAO,SAAS,IAAI;IACtB;AACF;AAEO,MAAM,cAAc,IAAI;uCAChB","debugId":null}},
    {"offset": {"line": 393, "column": 0}, "map": {"version":3,"sources":["file:///D:/my-fullstack-app/frontend/src/contexts/GameContext.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useState, ReactNode } from \"react\";\nimport gameService, {\n  Game,\n  CreateGameDto,\n  GameSettings,\n} from \"../services/game.service\";\n\ninterface GameContextType {\n  currentGame: Game | null;\n  isLoading: boolean;\n  error: string | null;\n  createGame: (settings: GameSettings) => Promise<Game>;\n  makeChoice: (choiceNumber: number) => Promise<void>;\n  clearError: () => void;\n}\n\ninterface GameProviderProps {\n  children: ReactNode;\n}\n\nconst GameContext = createContext<GameContextType | undefined>(undefined);\n\nexport const GameProvider: React.FC<GameProviderProps> = ({ children }) => {\n  const [currentGame, setCurrentGame] = useState<Game | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const createGame = async (gameSettings: GameSettings): Promise<Game> => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const createGameDto: CreateGameDto = { gameSettings };\n      const game = await gameService.createGame(createGameDto);\n      setCurrentGame(game);\n      return game;\n    } catch (err) {\n      const errorMessage = \"Failed to create game. Please try again.\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const makeChoice = async (choiceNumber: number): Promise<void> => {\n    if (!currentGame) {\n      setError(\"No active game found\");\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const updatedGame = await gameService.makeChoice(\n        currentGame.id,\n        choiceNumber\n      );\n      setCurrentGame(updatedGame);\n    } catch (err) {\n      const errorMessage = \"Failed to process choice. Please try again.\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  const value = {\n    currentGame,\n    isLoading,\n    error,\n    createGame,\n    makeChoice,\n    clearError,\n  };\n\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n};\n\nexport const useGame = (): GameContextType => {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error(\"useGame must be used within a GameProvider\");\n  }\n  return context;\n};\n\nexport default GameContext;\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AAHA;;;;AAsBA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,eAA4C,CAAC,EAAE,QAAQ,EAAE;IACpE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC5D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IACpD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,MAAM,aAAa,OAAO;QACxB,aAAa;QACb,SAAS;QAET,IAAI;YACF,MAAM,gBAA+B;gBAAE;YAAa;YACpD,MAAM,OAAO,MAAM,kIAAA,CAAA,UAAW,CAAC,UAAU,CAAC;YAC1C,eAAe;YACf,OAAO;QACT,EAAE,OAAO,KAAK;YACZ,MAAM,eAAe;YACrB,SAAS;YACT,MAAM,IAAI,MAAM;QAClB,SAAU;YACR,aAAa;QACf;IACF;IAEA,MAAM,aAAa,OAAO;QACxB,IAAI,CAAC,aAAa;YAChB,SAAS;YACT;QACF;QAEA,aAAa;QACb,SAAS;QAET,IAAI;YACF,MAAM,cAAc,MAAM,kIAAA,CAAA,UAAW,CAAC,UAAU,CAC9C,YAAY,EAAE,EACd;YAEF,eAAe;QACjB,EAAE,OAAO,KAAK;YACZ,MAAM,eAAe;YACrB,SAAS;YACT,MAAM,IAAI,MAAM;QAClB,SAAU;YACR,aAAa;QACf;IACF;IAEA,MAAM,aAAa;QACjB,SAAS;IACX;IAEA,MAAM,QAAQ;QACZ;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBAAO,8OAAC,YAAY,QAAQ;QAAC,OAAO;kBAAQ;;;;;;AAC9C;AAEO,MAAM,UAAU;IACrB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;uCAEe","debugId":null}},
    {"offset": {"line": 480, "column": 0}, "map": {"version":3,"sources":["file:///D:/my-fullstack-app/frontend/src/components/Providers.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { ReactNode } from \"react\";\nimport { AuthProvider } from \"../contexts/AuthContext\";\nimport { GameProvider } from \"../contexts/GameContext\";\n\ninterface ProvidersProps {\n  children: ReactNode;\n}\n\nexport const Providers: React.FC<ProvidersProps> = ({ children }) => {\n  return (\n    <AuthProvider>\n      <GameProvider>{children}</GameProvider>\n    </AuthProvider>\n  );\n};\n\nexport default Providers;\n"],"names":[],"mappings":";;;;;AAGA;AACA;AAJA;;;;AAUO,MAAM,YAAsC,CAAC,EAAE,QAAQ,EAAE;IAC9D,qBACE,8OAAC,+HAAA,CAAA,eAAY;kBACX,cAAA,8OAAC,+HAAA,CAAA,eAAY;sBAAE;;;;;;;;;;;AAGrB;uCAEe","debugId":null}}]
}