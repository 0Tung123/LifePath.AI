{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///D:/my-fullstack-app/frontend/src/utils/apiRoutes.ts"],"sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\n\n// Get the base URL from environment variables or use default\nconst getBaseUrl = () =>\n  process.env.NEXT_PUBLIC_API_URL || \"http://localhost:3000\";\n\n// Create a configured axios instance for API routes\nexport const apiRouteClient = (cookie?: string) => {\n  const config: AxiosRequestConfig = {\n    baseURL: getBaseUrl(),\n    withCredentials: true,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // Add cookie header if provided\n  if (cookie) {\n    config.headers = {\n      ...config.headers,\n      Cookie: cookie,\n    };\n  }\n\n  return axios.create(config);\n};\n"],"names":[],"mappings":";;;AAAA;;AAEA,6DAA6D;AAC7D,MAAM,aAAa,IACjB,6DAAmC;AAG9B,MAAM,iBAAiB,CAAC;IAC7B,MAAM,SAA6B;QACjC,SAAS;QACT,iBAAiB;QACjB,SAAS;YACP,gBAAgB;QAClB;IACF;IAEA,gCAAgC;IAChC,IAAI,QAAQ;QACV,OAAO,OAAO,GAAG;YACf,GAAG,OAAO,OAAO;YACjB,QAAQ;QACV;IACF;IAEA,OAAO,uIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;AACtB","debugId":null}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["file:///D:/my-fullstack-app/frontend/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { apiRouteClient } from \"@/utils/apiRoutes\";\nimport { ApiRouteError } from \"@/types/api.types\";\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const api = apiRouteClient();\n\n    const response = await api.post(\"/auth/login\", body);\n\n    // Lấy cookie từ response\n    const cookies = response.headers[\"set-cookie\"];\n\n    // Tạo response với cookie\n    const nextResponse = NextResponse.json(response.data);\n\n    // Thêm cookie từ backend vào response\n    if (cookies) {\n      for (const cookie of cookies) {\n        const match = cookie.match(/^([^=]+)=([^;]+)/);\n        if (match) {\n          const name = match[1].trim();\n          const value = match[2].trim();\n\n          // Chỉ thêm cookie JWT\n          if (name === \"jwt\") {\n            nextResponse.cookies.set({\n              name,\n              value,\n              httpOnly: true,\n              secure: process.env.NODE_ENV === \"production\",\n              sameSite: \"lax\",\n              path: \"/\",\n            });\n          }\n        }\n      }\n    }\n\n    return nextResponse;\n  } catch (error: unknown) {\n    const apiError = error as ApiRouteError;\n    console.error(\n      \"Error logging in:\",\n      apiError.response?.data || apiError.message\n    );\n    return NextResponse.json(\n      { message: apiError.response?.data?.message || \"Failed to login\" },\n      { status: apiError.response?.status || 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,MAAM,CAAA,GAAA,2HAAA,CAAA,iBAAc,AAAD;QAEzB,MAAM,WAAW,MAAM,IAAI,IAAI,CAAC,eAAe;QAE/C,yBAAyB;QACzB,MAAM,UAAU,SAAS,OAAO,CAAC,aAAa;QAE9C,0BAA0B;QAC1B,MAAM,eAAe,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS,IAAI;QAEpD,sCAAsC;QACtC,IAAI,SAAS;YACX,KAAK,MAAM,UAAU,QAAS;gBAC5B,MAAM,QAAQ,OAAO,KAAK,CAAC;gBAC3B,IAAI,OAAO;oBACT,MAAM,OAAO,KAAK,CAAC,EAAE,CAAC,IAAI;oBAC1B,MAAM,QAAQ,KAAK,CAAC,EAAE,CAAC,IAAI;oBAE3B,sBAAsB;oBACtB,IAAI,SAAS,OAAO;wBAClB,aAAa,OAAO,CAAC,GAAG,CAAC;4BACvB;4BACA;4BACA,UAAU;4BACV,QAAQ,oDAAyB;4BACjC,UAAU;4BACV,MAAM;wBACR;oBACF;gBACF;YACF;QACF;QAEA,OAAO;IACT,EAAE,OAAO,OAAgB;QACvB,MAAM,WAAW;QACjB,QAAQ,KAAK,CACX,qBACA,SAAS,QAAQ,EAAE,QAAQ,SAAS,OAAO;QAE7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS,SAAS,QAAQ,EAAE,MAAM,WAAW;QAAkB,GACjE;YAAE,QAAQ,SAAS,QAAQ,EAAE,UAAU;QAAI;IAE/C;AACF","debugId":null}}]
}