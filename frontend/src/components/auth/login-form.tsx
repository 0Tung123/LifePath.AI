"use client";

import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useRouter, useSearchParams } from "next/navigation";
import Link from "next/link";

import { AIContainer } from "@/components/ui/ai-container";
import { AIButton } from "@/components/ui/ai-button";
import { AIInput } from "@/components/ui/ai-input";
import { AIText } from "@/components/ui/ai-text";
import { AICard } from "@/components/ui/ai-card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useAuthStore } from "@/store/auth-store";

const loginSchema = z.object({
  email: z.string().email({ message: "Email kh√¥ng h·ª£p l·ªá" }),
  password: z.string().min(6, { message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" }),
});

type LoginFormValues = z.infer<typeof loginSchema>;

export function LoginForm() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [welcomeMessage, setWelcomeMessage] = useState("");
  const router = useRouter();
  const searchParams = useSearchParams();
  const { login } = useAuthStore();

  useEffect(() => {
    const messages = [
      "Ch√†o m·ª´ng tr·ªü l·∫°i h·ªá th·ªëng AI",
      "ƒêƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c cu·ªôc phi√™u l∆∞u",
      "H·ªá th·ªëng ƒëang ch·ªù k·∫øt n·ªëi v·ªõi b·∫°n",
      "X√°c th·ª±c danh t√≠nh ƒë·ªÉ truy c·∫≠p",
      "C·ªïng v√†o th·∫ø gi·ªõi AI ƒëang m·ªü",
    ];
    setWelcomeMessage(messages[Math.floor(Math.random() * messages.length)]);

    // Check if user just registered
    const registered = searchParams.get("registered");
    if (registered === "true") {
      setSuccess("ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.");
    }
  }, [searchParams]);

  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  async function onSubmit(data: LoginFormValues) {
    setIsSubmitting(true);
    setError(null);
    setSuccess(null);

    console.log("üîë [LOGIN-FORM-SUBMIT] Login form submitted", {
      email: data.email,
      timestamp: new Date().toISOString()
    });

    try {
      await login(data.email, data.password);

      // Check if there's a redirect parameter
      const redirectTo = searchParams.get("redirect");
      const expired = searchParams.get("expired");
      
      if (redirectTo) {
        console.log("‚úÖ [LOGIN-REDIRECT] Redirecting after login", {
          redirectTo,
          wasExpired: expired === "true",
          timestamp: new Date().toISOString()
        });
        router.push(redirectTo);
      } else {
        console.log("‚úÖ [LOGIN-REDIRECT] Redirecting to dashboard", {
          timestamp: new Date().toISOString()
        });
        router.push("/dashboard");
      }
    } catch (err: any) {
      console.error("‚ùå [LOGIN-FORM-ERROR] Login failed", {
        email: data.email,
        status: err.response?.status,
        message: err.response?.data?.message || err.message,
        timestamp: new Date().toISOString()
      });
      
      setError(
        err.response?.data?.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i."
      );
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <AIContainer variant="glass" glowing className="max-w-md mx-auto p-8">
      <div className="space-y-4 text-center">
        <AIText variant="gradient" as="h1" className="text-3xl font-bold">
          ƒêƒÉng nh·∫≠p
        </AIText>
        <AIText
          variant="typing"
          className="text-muted-foreground"
          delay={500}
          speed={30}
        >
          {welcomeMessage}
        </AIText>
      </div>

      {error && (
        <AICard variant="gradient" className="mt-6 p-4 border-destructive/50">
          <AIText variant="glitch" className="text-destructive text-sm">
            {error}
          </AIText>
        </AICard>
      )}

      {success && (
        <AICard variant="gradient" className="mt-6 p-4 border-primary/50">
          <AIText variant="typing" className="text-primary text-sm">
            {success}
          </AIText>
        </AICard>
      )}

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6 mt-6">
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-foreground/80">Email</FormLabel>
                <FormControl>
                  <AIInput
                    placeholder="user@example.com"
                    variant="neon"
                    glow
                    {...field}
                  />
                </FormControl>
                <FormMessage className="text-destructive text-xs" />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="password"
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-foreground/80">M·∫≠t kh·∫©u</FormLabel>
                <FormControl>
                  <AIInput
                    type="password"
                    placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                    variant="neon"
                    glow
                    {...field}
                  />
                </FormControl>
                <FormMessage className="text-destructive text-xs" />
              </FormItem>
            )}
          />

          <div className="text-right text-sm">
            <Link
              href="/forgot-password"
              className="ai-text text-primary hover:text-primary/80"
            >
              Qu√™n m·∫≠t kh·∫©u?
            </Link>
          </div>

          <AIButton
            type="submit"
            variant="gradient"
            glow
            className="w-full"
            loading={isSubmitting}
          >
            ƒêƒÉng nh·∫≠p
          </AIButton>
        </form>
      </Form>

      <div className="text-center mt-6">
        <span className="text-muted-foreground">Ch∆∞a c√≥ t√†i kho·∫£n? </span>
        <Link
          href="/signup"
          className="ai-text text-primary hover:text-primary/80"
        >
          ƒêƒÉng k√Ω
        </Link>
      </div>

      <div className="mt-8 pt-6 border-t border-border text-center">
        <AIText variant="neon" className="text-xs text-muted-foreground">
          SYSTEM v2.4.7 // NEURAL INTERFACE READY
        </AIText>
      </div>
    </AIContainer>
  );
}
